{"version":3,"sources":["serviceWorker.js","components/Firebase/firebase.js","constants/firebase_config.js","components/Firebase/context.js","components/Firebase/index.js","components/SignOut/index.js","components/Session/context.js","components/Session/withAuthentication.js","components/Session/withAuthorization.js","constants/routes.js","components/Navigation/index.js","components/Landing/index.js","components/PasswordForget/index.js","components/SignIn/index.js","components/PasswordChange/index.js","components/Account/index.js","components/Editor/Tag/index.js","components/Editor/TagList/index.js","components/Editor/index.js","components/App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","doSignInWithEmailAndPassword","email","password","auth","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","user","uid","db","doc","users","collection","tags","tag","id","firebase","initializeApp","this","firestore","FirebaseContext","React","createContext","withFirebase","Component","props","Consumer","className","type","onClick","AuthUserContext","withAuthentication","useState","authUser","setAuthUser","useEffect","onAuthStateChanged","Provider","value","withAuthorization","condition","compose","withRouter","history","push","NavigationAuth","to","SignOut","NavigationNonAuth","Navigation","LandingPage","INITIAL_STATE","PasswordForgetLink","PasswordForgetPage","PasswordForgetForm","userInfo","setUserInfo","error","setError","isInvalid","onSubmit","event","then","catch","console","log","preventDefault","name","onChange","target","placeholder","disabled","message","SignInForm","SignInPage","passwordOne","passwordTwo","pwdInfo","setPwdInfo","PasswordChange","Tag","TagList","loading","map","key","TAG","data","parent","setTags","setLoading","unsubscribe","onSnapshot","snapshot","size","forEach","basename","exact","path","component","AccountPage","Editor","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb59da42.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\nimport 'firebase/firestore'\r\n\r\nimport * as CONFIG from '../../constants/firebase_config'\r\n\r\nconst config = {\r\n  apiKey: CONFIG.ATHLAS_API_KEY,\r\n  authDomain: CONFIG.ATHLAS_AUTH_DOMAIN,\r\n  databaseURL: CONFIG.ATHLAS_DATABASE_URL,\r\n  projectId: CONFIG.ATHLAS_PROJECT_ID,\r\n  storageBucket: CONFIG.ATHLAS_STORAGE_BUCKET,\r\n  messagingSenderId: CONFIG.ATHLAS_MESSAGING_SENDER_ID,\r\n  appId: CONFIG.ATHLAS_APP_ID,\r\n  measurementId: CONFIG.ATHLAS_MEASUREMENT_ID\r\n}\r\n\r\nclass Firebase {\r\n  constructor() {\r\n    firebase.initializeApp(config)\r\n\r\n    this.auth = firebase.auth()\r\n    this.db = firebase.firestore()\r\n  }\r\n\r\n  // *** Auth API ***\r\n\r\n  doSignInWithEmailAndPassword = (email, password) =>\r\n    this.auth.signInWithEmailAndPassword(email, password)\r\n\r\n  doSignOut = () => this.auth.signOut()\r\n\r\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\r\n\r\n  doPasswordUpdate = password =>\r\n    this.auth.currentUser.updatePassword(password);\r\n\r\n  // *** User API ***\r\n  user = uid => this.db.doc(`users/${uid}`)\r\n\r\n  users = () => this.db.collection('users')\r\n\r\n  // *** Tags API ***\r\n  tags = () => this.db.collection('tags')\r\n\r\n  tag = id => this.db.doc(`tags/${id}`)\r\n}\r\n\r\nexport default Firebase","export const ATHLAS_API_KEY = \"AIzaSyCyzjpM-Td5MIf0Lhgaes90Z5L5XtZerYM\"\r\nexport const ATHLAS_AUTH_DOMAIN = \"athlas-4ae1b.firebaseapp.com\"\r\nexport const ATHLAS_DATABASE_URL = \"https://athlas-4ae1b.firebaseio.com\"\r\nexport const ATHLAS_PROJECT_ID = \"athlas-4ae1b\"\r\nexport const ATHLAS_STORAGE_BUCKET = \"athlas-4ae1b.appspot.com\"\r\nexport const ATHLAS_MESSAGING_SENDER_ID = \"681754440432\"\r\nexport const ATHLAS_APP_ID = \"1:681754440432:web:3d34c91b082cbeff5c4835\"\r\nexport const ATHLAS_MEASUREMENT_ID = \"G-VXMB44Z5MT\"","import React from 'react'\r\n\r\nconst FirebaseContext = React.createContext(null)\r\n\r\nexport const withFirebase = Component => props => (\r\n  <FirebaseContext.Consumer>\r\n    { firebase => <Component {...props} firebase={firebase} />}\r\n  </FirebaseContext.Consumer>\r\n)\r\n\r\nexport default FirebaseContext","import Firebase from \"./firebase\";\r\nimport FirebaseContext, { withFirebase } from './context'\r\n\r\nexport default Firebase\r\n\r\nexport { FirebaseContext, withFirebase }","import React from 'react'\r\n\r\nimport { withFirebase } from '../Firebase'\r\n\r\nimport './SignOutButton.css'\r\n\r\nconst SignOutButton = ({ firebase }) => (\r\n  <button\r\n    className='SignOutButton'\r\n    type=\"button\"\r\n    onClick={firebase.doSignOut}\r\n  >\r\n    Sign Out\r\n  </button>\r\n)\r\n\r\nexport default withFirebase(SignOutButton)","import React from 'react'\r\n\r\nconst AuthUserContext = React.createContext(null)\r\n\r\nexport default AuthUserContext","import React, { useState, useEffect } from 'react'\r\n\r\nimport AuthUserContext from './context'\r\nimport { withFirebase } from '../Firebase'\r\n\r\nconst withAuthentication = Component => {\r\n  const WithAuthentication = (props) => {\r\n    const [authUser, setAuthUser] = useState(null)\r\n\r\n    useEffect(() => {\r\n      props.firebase.auth.onAuthStateChanged(\r\n        authUser => {\r\n          authUser\r\n            ? setAuthUser(authUser)\r\n            : setAuthUser(null)\r\n        }\r\n      )\r\n    })\r\n\r\n    return (\r\n      <AuthUserContext.Provider value={authUser}>\r\n        <Component {...props} />\r\n      </AuthUserContext.Provider>\r\n    )\r\n  }\r\n\r\n  return withFirebase(WithAuthentication)\r\n}\r\n\r\nexport default withAuthentication","import React, { useEffect } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { compose } from 'recompose'\r\n\r\nimport AuthUserContext from  './context'\r\nimport { withFirebase } from '../Firebase'\r\nimport * as ROUTES from '../../constants/routes'\r\n\r\nconst withAuthorization = condition => Component => {\r\n  const WithAuthorization = (props) => {\r\n    useEffect(() => {\r\n      props.firebase.auth.onAuthStateChanged(\r\n        authUser => {\r\n          if (!condition(authUser)) {\r\n            props.history.push(ROUTES.SIGN_IN)\r\n          }\r\n        }\r\n      )\r\n    })\r\n\r\n    return (\r\n      <AuthUserContext.Consumer>\r\n        { authUser =>\r\n          condition(authUser) ? <Component {...props} /> : null\r\n        }\r\n      </AuthUserContext.Consumer>\r\n    )\r\n  }\r\n\r\n  return compose(\r\n    withRouter,\r\n    withFirebase\r\n  ) (WithAuthorization)\r\n}\r\n\r\nexport default withAuthorization","export const LANDING = '/'\r\nexport const SIGN_IN = '/signin'\r\nexport const EDITOR = '/editor'\r\nexport const ACCOUNT = '/account'\r\nexport const PASSWORD_FORGET = '/pw-forget'","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport SignOutButton from '../SignOut'\r\nimport * as ROUTES from '../../constants/routes'\r\n\r\nimport { AuthUserContext } from '../Session'\r\n\r\nimport './navigation.css'\r\n\r\nconst Navigation = () => (\r\n  <div className='Navigation'>\r\n    <AuthUserContext.Consumer>\r\n      { authUser =>\r\n        authUser ? <NavigationAuth /> : <NavigationNonAuth />\r\n      }\r\n    </AuthUserContext.Consumer>\r\n  </div>\r\n)\r\n\r\nconst NavigationAuth = () => (\r\n  <div>\r\n    <ul>\r\n      <li>\r\n        <Link to={ROUTES.LANDING}>Landing</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.EDITOR}>Editor</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.ACCOUNT}>Account</Link>\r\n      </li>\r\n      <SignOutButton />\r\n    </ul>\r\n  </div>\r\n)\r\n\r\nconst NavigationNonAuth = () => (\r\n  <div>\r\n    <ul>\r\n      <li>\r\n        <Link to={ROUTES.SIGN_IN}>Sign In</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.LANDING}>Landing</Link>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n)\r\n\r\nexport default Navigation","import React from 'react'\r\n\r\nconst LandingPage = () => (\r\n  <div>\r\n    Landing Page\r\n  </div>\r\n)\r\n\r\nexport default LandingPage","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { withFirebase } from '../Firebase'\r\nimport * as ROUTES from '../../constants/routes'\r\n\r\nconst PasswordForgetPage = () => (\r\n  <div>\r\n    <h1>Password Forget</h1>\r\n    <PasswordForgetForm />\r\n  </div>\r\n)\r\n\r\nconst INITIAL_STATE= {\r\n  email: ''\r\n}\r\n\r\nconst PasswordForgetFormBase = (props) => {\r\n  const [userInfo, setUserInfo] = useState(INITIAL_STATE)\r\n  const [error, setError] = useState(null)\r\n\r\n  const onSubmit = event => {\r\n    const { email } = userInfo\r\n\r\n    props.firebase\r\n      .doPasswordReset(email)\r\n      .then(() => {\r\n        setUserInfo(INITIAL_STATE)\r\n      })\r\n      .catch( error => {\r\n        console.log(error)\r\n        setError(error)\r\n      })\r\n\r\n    event.preventDefault()\r\n  }\r\n\r\n  const onChange = event => {\r\n    const { name, value } = event.target\r\n    setUserInfo((userInfo) => ({...userInfo, [name]: value}))\r\n  }\r\n\r\n  const isInvalid = userInfo.email === ''\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input\r\n        name=\"email\"\r\n        value={userInfo.email}\r\n        onChange={onChange}\r\n        type=\"text\"\r\n        placeholder=\"Email Address\"\r\n      />\r\n      <button disabled={isInvalid} type=\"submit\">\r\n        Reset My Password\r\n      </button>\r\n\r\n      {error && <p>{error.message}</p>}\r\n    </form>\r\n  )\r\n}\r\n\r\nconst PasswordForgetLink = () => (\r\n  <p>\r\n    <Link to={ROUTES.PASSWORD_FORGET}>Forgot Password?</Link>\r\n  </p>\r\n)\r\n\r\nexport default PasswordForgetPage\r\n\r\nconst PasswordForgetForm = withFirebase(PasswordForgetFormBase)\r\n\r\nexport { PasswordForgetForm, PasswordForgetLink }","import React, { useState } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { compose } from 'recompose'\r\n\r\nimport { PasswordForgetLink } from '../PasswordForget'\r\nimport { withFirebase } from '../Firebase'\r\nimport * as ROUTES from '../../constants/routes'\r\n\r\nconst SignInPage = () => (\r\n  <div>\r\n    <h1>Sign In</h1>\r\n    <SignInForm />\r\n    <PasswordForgetLink />\r\n  </div>\r\n)\r\n\r\nconst INITIAL_STATE = {\r\n  email: '',\r\n  password: ''\r\n}\r\n\r\nconst SignInFormBase = (props) => {\r\n  const [userInfo, setUserInfo] = useState(INITIAL_STATE)\r\n  const [error, setError] = useState(null)\r\n\r\n  const onSubmit = event => {\r\n    const { email, password } = userInfo\r\n\r\n    props.firebase\r\n      .doSignInWithEmailAndPassword(email, password)\r\n      .then(() => {\r\n        setUserInfo(INITIAL_STATE)\r\n        props.history.push(ROUTES.EDITOR)\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        setError(error)\r\n      })\r\n\r\n    event.preventDefault()\r\n  }\r\n\r\n  const onChange = event => {\r\n    const { name, value } = event.target\r\n    setUserInfo((userInfo) => ({...userInfo, [name]: value}))\r\n  }\r\n\r\n  const isInvalid = userInfo.password === '' || userInfo.email === ''\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input\r\n        name=\"email\"\r\n        value={userInfo.email}\r\n        onChange={onChange}\r\n        type=\"text\"\r\n        placeholder=\"Email Address\"\r\n      />\r\n      <input\r\n        name=\"password\"\r\n        value={userInfo.password}\r\n        onChange={onChange}\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n      />\r\n      <button disabled={isInvalid} type=\"submit\">\r\n        Sign In\r\n      </button>\r\n\r\n      {error && <p>{error.message}</p>}\r\n    </form>\r\n  )\r\n}\r\n\r\nconst SignInForm = compose(\r\n  withRouter,\r\n  withFirebase\r\n) (SignInFormBase)\r\n\r\nexport default SignInPage\r\n\r\nexport { SignInForm }","import React, { useState } from 'react'\r\n\r\nimport { withFirebase } from '../Firebase'\r\n\r\nconst INITIAL_STATE = {\r\n  passwordOne: '',\r\n  passwordTwo: ''\r\n}\r\n\r\nconst PasswordChangeForm = (props) => {\r\n  const [pwdInfo, setPwdInfo] = useState(INITIAL_STATE)\r\n  const [error, setError] = useState(null)\r\n\r\n  const onSubmit = event => {\r\n    const { passwordOne } = pwdInfo\r\n\r\n    props.firebase\r\n      .doPasswordUpdate(passwordOne)\r\n      .then(() => {\r\n        setPwdInfo(INITIAL_STATE)\r\n      })\r\n      .catch(error => {\r\n        setError(error)\r\n      })\r\n\r\n    event.preventDefault()\r\n  }\r\n\r\n  const onChange = event => {\r\n    const { name, value } = event.target\r\n    setPwdInfo((userInfo) => ({...userInfo, [name]: value}))\r\n  }\r\n\r\n  const isInvalid = pwdInfo.passwordOne !== pwdInfo.passwordTwo\r\n    || pwdInfo.passwordOne === ''\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input\r\n        name=\"passwordOne\"\r\n        value={pwdInfo.passwordOne}\r\n        onChange={onChange}\r\n        type=\"password\"\r\n        placeholder=\"New Password\"\r\n      />\r\n      <input\r\n        name=\"passwordTwo\"\r\n        value={pwdInfo.passwordTwo}\r\n        onChange={onChange}\r\n        type=\"password\"\r\n        placeholder=\"Confirm New Password\"\r\n      />\r\n      <button disabled={isInvalid} type=\"submit\">\r\n        Reset My Password\r\n      </button>\r\n\r\n      {error && <p>{error.message}</p>}\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default withFirebase(PasswordChangeForm)","import React from 'react'\r\n\r\nimport { PasswordForgetForm } from '../PasswordForget'\r\nimport PasswordChangeForm from '../PasswordChange'\r\nimport { AuthUserContext, withAuthorization } from '../Session'\r\n\r\nconst AccountPage = () => (\r\n  <AuthUserContext.Consumer>\r\n    { authUser => (\r\n      <div>\r\n        <h1>Account: {authUser.email}</h1>\r\n        <PasswordForgetForm />\r\n        <PasswordChangeForm />\r\n      </div>\r\n    )}\r\n  </AuthUserContext.Consumer>\r\n)\r\n\r\nconst authCondition = authUser => !!authUser\r\n\r\nexport default withAuthorization(authCondition) (AccountPage)","import React from 'react'\r\n\r\nconst Tag = (props) => {\r\n  return (\r\n    <div>\r\n      <h2>{props.name}</h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tag","import React from 'react'\r\n\r\nimport Tag from '../Tag'\r\n\r\nconst TagList = (props) => {\r\n  if (props.loading) {\r\n    return (\r\n      <p>Loading...</p>\r\n    )\r\n  } else {\r\n    return (\r\n      <div>\r\n        {props.tags.map(tag => (\r\n          <Tag key={tag.id} name={tag.name} />\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TagList","import React, { useState, useEffect } from 'react'\r\n\r\nimport { AuthUserContext, withAuthorization } from '../Session'\r\nimport TagList from './TagList'\r\n\r\nconst authCondition = authUser => !!authUser\r\n\r\nclass TAG {\r\n  constructor(id, data) {\r\n    this.id = id\r\n    this.name = data.name\r\n    this.data = data\r\n  }\r\n\r\n  getParent() {\r\n    const parent = this.data.parent\r\n    \r\n    if (parent != null) {\r\n      return new TAG(parent.id, parent.data())\r\n    } else {\r\n      console.log(\"No parent\")\r\n    }\r\n  }\r\n}\r\n\r\nconst Editor = (props) => {\r\n  const [tags, setTags] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n\r\n    const unsubscribe = props.firebase\r\n      .tags().onSnapshot(snapshot => {\r\n        if (snapshot.size) {\r\n          const tags = []\r\n\r\n          snapshot.forEach(doc => {\r\n            const tag = new TAG(doc.id, doc.data())\r\n\r\n            tags.push({...tag})\r\n          })\r\n\r\n          setTags(tags)\r\n          setLoading(false)\r\n        } else {\r\n          // Set error\r\n          setLoading(false)\r\n        }\r\n      })\r\n\r\n    return () => unsubscribe()\r\n  }, [props.firebase])\r\n\r\n  return (\r\n    <AuthUserContext.Consumer>\r\n      { authUser =>\r\n        <div>\r\n          <TagList\r\n            tags={tags}\r\n            loading={loading} />\r\n        </div>\r\n      }\r\n    </AuthUserContext.Consumer>\r\n  )\r\n}\r\n\r\nexport default withAuthorization(authCondition) (Editor)","import React from 'react'\nimport {\n  HashRouter as Router,\n  Route\n} from 'react-router-dom'\n\nimport Navigation from '../Navigation'\nimport LandingPage from '../Landing'\nimport SignInPage from '../SignIn'\nimport PasswordForgetPage from '../PasswordForget'\nimport AccountPage from '../Account'\nimport Editor from '../Editor'\n\nimport * as ROUTES from '../../constants/routes'\nimport { withAuthentication } from '../Session'\n\nconst App = () => (\n  <Router basename='/'>\n    <Navigation />\n\n    <Route exact path={ROUTES.LANDING} component={LandingPage} />\n    <Route path={ROUTES.SIGN_IN} component={SignInPage} />\n    <Route path={ROUTES.PASSWORD_FORGET} component={PasswordForgetPage} />\n    <Route path={ROUTES.ACCOUNT} component={AccountPage} />\n    <Route path={ROUTES.EDITOR} component={Editor} />\n  </Router>\n)\n\nexport default withAuthentication(App)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'normalize.css'\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './components/App'\nimport Firebase, { FirebaseContext } from './components/Firebase'\n\nReactDOM.render(\n  <FirebaseContext.Provider value={new Firebase()}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}